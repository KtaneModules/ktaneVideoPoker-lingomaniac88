import numpy as np
import re
import sklearn.svm

# Information taken from WizardOfOdds.com

upper = '2347; 2348; 2349; 234T; 2357; 2358; 2359; 235T; 236A; 2367; 2368; 2369;236T; 237A; 2378; 2379; 237T; 238A; 2389; 238T; 239A; 239T; 23TA; 2457;2458; 2459; 245T; 246A; 2467; 2468; 2469; 246T; 247A; 2478; 2479; 247T;248A; 2489; 248T; 249A; 249T; 24TA; 256A; 2567; 2568; 2569; 256T; 257A;2578; 2579; 257T; 258A; 2589; 258T; 259A; 259T; 25TA; 267A; 2678; 2679;267T; 268A; 2689; 268T; 269A; 269T; 26TA; 278A; 2789; 278T; 279A; 279T;27TA; 289A; 289T; 28TA; 29TA; 2JQA; 2JQK; 2JKA; 2QKA; 3458; 3459; 345T;346A; 3468; 3469; 346T; 347A; 3478; 3479; 347T; 348A; 3489; 348T; 349A;349T; 34TA; 356A; 3568; 3569; 356T; 357A; 3578; 3579; 357T; 358A; 3589;358T; 359A; 359T; 35TA; 367A; 3678; 3679; 367T; 368A; 3689; 368T; 369A;369T; 36TA; 378A; 3789; 378T; 379A; 379T; 37TA; 389A; 389T; 38TA; 39TA;3JQA; 3JQK; 3JKA; 3QKA; 456A; 4569; 456T; 457A; 4579; 457T; 458A; 4589;458T; 459A; 459T; 45TA; 467A; 4679; 467T; 468A; 4689; 468T; 469A; 469T;46TA; 478A; 4789; 478T; 479A; 479T; 47TA; 489A; 489T; 48TA; 49TA; 4JQA;4JQK; 4JKA; 4QKA; 567A; 567T; 568A; 568T; 569A; 569T; 56TA; 578A; 578T;579A; 579T; 57TA; 589A; 589T; 58TA; 59TA; 5JQA; 5JQK; 5JKA; 5QKA; 678A;679A; 67TA; 689A; 68TA; 69TA; 6JQA; 6JQK; 6JKA; 6QKA; 789A; 78TA; 79TA;7JQA; 7JQK; 7JKA; 7QKA; 89TA; 8JQA; 8JQK; 8JKA; 8QKA; 9JQA; 9JKA; 9QKA'.replace(' ', '').split(';')

lower = '234J; 234Q; 234K; 235J; 235Q; 235K; 236J; 236Q; 236K; 237J; 237Q; 237K;238J; 238Q; 238K; 239J; 239Q; 239K; 23TJ; 23TQ; 23TK; 23JA; 23JQ; 23JK;23QA; 23QK; 23KA; 245J; 245Q; 245K; 246J; 246Q; 246K; 247J; 247Q; 247K;248J; 248Q; 248K; 249J; 249Q; 249K; 24TJ; 24TQ; 24TK; 24JA; 24JQ; 24JK;24QA; 24QK; 24KA; 256J; 256Q; 256K; 257J; 257Q; 257K; 258J; 258Q; 258K;259J; 259Q; 259K; 25TJ; 25TQ; 25TK; 25JA; 25JQ; 25JK; 25QA; 25QK; 25KA;267J; 267Q; 267K; 268J; 268Q; 268K; 269J; 269Q; 269K; 26TJ; 26TQ; 26TK;26JA; 26JQ; 26JK; 26QA; 26QK; 26KA; 278J; 278Q; 278K; 279J; 279Q; 279K;27TJ; 27TQ; 27TK; 27JA; 27JQ; 27JK; 27QA; 27QK; 27KA; 289J; 289Q; 289K;28TJ; 28TQ; 28TK; 28JA; 28JQ; 28JK; 28QA; 28QK; 28KA; 29TJ; 29TQ; 29TK;29JA; 29JQ; 29JK; 29QA; 29QK; 29KA; 2TJA; 2TJK; 2TQA; 2TQK; 2TKA; 345J;345Q; 345K; 346J; 346Q; 346K; 347J; 347Q; 347K; 348J; 348Q; 348K; 349J;349Q; 349K; 34TJ; 34TQ; 34TK; 34JA; 34JQ; 34JK; 34QA; 34QK; 34KA; 356J;356Q; 356K; 357J; 357Q; 357K; 358J; 358Q; 358K; 359J; 359Q; 359K; 35TJ;35TQ; 35TK; 35JA; 35JQ; 35JK; 35QA; 35QK; 35KA; 367J; 367Q; 367K; 368J;368Q; 368K; 369J; 369Q; 369K; 36TJ; 36TQ; 36TK; 36JA; 36JQ; 36JK; 36QA;36QK; 36KA; 378J; 378Q; 378K; 379J; 379Q; 379K; 37TJ; 37TQ; 37TK; 37JA;37JQ; 37JK; 37QA; 37QK; 37KA; 389J; 389Q; 389K; 38TJ; 38TQ; 38TK; 38JA;38JQ; 38JK; 38QA; 38QK; 38KA; 39TJ; 39TQ; 39TK; 39JA; 39JQ; 39JK; 39QA;39QK; 39KA; 3TJA; 3TJK; 3TQA; 3TQK; 3TKA; 456J; 456Q; 456K; 457J; 457Q;457K; 458J; 458Q; 458K; 459J; 459Q; 459K; 45TJ; 45TQ; 45TK; 45JA; 45JQ;45JK; 45QA; 45QK; 45KA; 467J; 467Q; 467K; 468J; 468Q; 468K; 469J; 469Q;469K; 46TJ; 46TQ; 46TK; 46JA; 46JQ; 46JK; 46QA; 46QK; 46KA; 478J; 478Q;478K; 479J; 479Q; 479K; 47TJ; 47TQ; 47TK; 47JA; 47JQ; 47JK; 47QA; 47QK;47KA; 489J; 489Q; 489K; 48TJ; 48TQ; 48TK; 48JA; 48JQ; 48JK; 48QA; 48QK;48KA; 49TJ; 49TQ; 49TK; 49JA; 49JQ; 49JK; 49QA; 49QK; 49KA; 4TJA; 4TJK;4TQA; 4TQK; 4TKA; 567J; 567Q; 567K; 568J; 568Q; 568K; 569J; 569Q; 569K;56TJ; 56TQ; 56TK; 56JA; 56JQ; 56JK; 56QA; 56QK; 56KA; 578J; 578Q; 578K;579J; 579Q; 579K; 57TJ; 57TQ; 57TK; 57JA; 57JQ; 57JK; 57QA; 57QK; 57KA;589J; 589Q; 589K; 58TJ; 58TQ; 58TK; 58JA; 58JQ; 58JK; 58QA; 58QK; 58KA;59TJ; 59TQ; 59TK; 59JA; 59JQ; 59JK; 59QA; 59QK; 59KA; 5TJA; 5TJK; 5TQA;5TQK; 5TKA; 678J; 678Q; 678K; 679J; 679Q; 679K; 67TJ; 67TQ; 67TK; 67JA;67JQ; 67JK; 67QA; 67QK; 67KA; 689J; 689Q; 689K; 68TJ; 68TQ; 68TK; 68JA;68JQ; 68JK; 68QA; 68QK; 68KA; 69TJ; 69TQ; 69TK; 69JA; 69JQ; 69JK; 69QA;69QK; 69KA; 6TJA; 6TJK; 6TQA; 6TQK; 6TKA; 789Q; 789K; 78TQ; 78TK; 78JA;78JQ; 78JK; 78QA; 78QK; 78KA; 79TQ; 79TK; 79JA; 79JQ; 79JK; 79QA; 79QK;79KA; 7TJA; 7TJK; 7TQA; 7TQK; 7TKA; 89TK; 89JA; 89JK; 89QA; 89QK; 89KA;8TJA; 8TJK; 8TQA; 8TQK; 8TKA; 9TJA; 9TQA; 9TKA'.replace(' ', '').split(';')

# Refine the upper bucket to only get flush draws that matter
upper = list(filter(lambda x: 'J' in x or 'Q' in x or 'K' in x, upper))

X = [np.array([hand.count(c) for c in '.A23456789TJQK']) for hand in lower + upper]
Y = np.array([1] * len(upper) + [-1] * len(lower))

svm = sklearn.svm.LinearSVC(verbose=True)
svm.fit(X, Y)

print()

print(svm.score(X, Y))

def test_vector(v):
    pos = np.array([x for (x, y) in zip(X, Y) if y > 0])
    neg = np.array([x for (x, y) in zip(X, Y) if y < 0])
    print('upper: %f ~ %f' % (min(v.dot(pos.T)[0]), max(v.dot(pos.T)[0])))
    print('lower: %f ~ %f' % (min(v.dot(neg.T)[0]), max(v.dot(neg.T)[0])))
